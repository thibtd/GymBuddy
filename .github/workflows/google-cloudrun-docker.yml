# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a push to main passes the oint-test-format action.
# 
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

on:
  workflow_run:
    workflows: ["test-lint-format"] 
    types:
      - completed 

env:
  PROJECT_ID: 'gymbuddy-464513' 
  REGION: 'europe-west1'
  CONTAINER: 'gymbuddy-container'
  SERVICE_CONTAINER: 'gymbuddy'
  SERVICE_RUN: 'gymbuddy-2'
  WORKLOAD_IDENTITY_PROVIDER: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}'


jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: read
      id-token: write

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4' # actions/checkout@v4
        with:
          lfs: true

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.service_account }}'

      # BEGIN - Docker auth and build
      #
      # If you already have a container image, you can omit these steps.
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.REGION }}-docker.pkg.dev'
      
      - name: 'setup gcloud docker'
        run: |-
          gcloud auth configure-docker europe-west1-docker.pkg.dev
          
      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CONTAINER }}/${{ env.SERVICE_CONTAINER }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"
          
      - id: 'Deploy_to_Cloud_Run'
        # END - Docker auth and build
        uses: 'google-github-actions/deploy-cloudrun@v2' # google-github-actions/deploy-cloudrun@v2
        with:
          project_id: '${{ env.PROJECT_ID }}'
          service: '${{ env.SERVICE_RUN }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a pre-built image, update the image name below:
          image: "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.CONTAINER }}/${{ env.SERVICE_CONTAINER }}:${{ github.sha }}"
      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |2-

          echo ${{ steps.deploy.outputs.url }}
